{"version":3,"file":"module.js","mappings":"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","sources":["webpack:///external amd \"@grafana/data\"","webpack:///external amd \"@grafana/ui\"","webpack:///external amd \"react\"","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./synoptic/index.ts","webpack:///./ScadavisPanel.tsx","webpack:///./SvgFilePicker.tsx","webpack:///./module.ts"],"sourcesContent":["module.exports = __WEBPACK_EXTERNAL_MODULE__305__;","module.exports = __WEBPACK_EXTERNAL_MODULE__388__;","module.exports = __WEBPACK_EXTERNAL_MODULE__650__;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","/*\r\n *\r\n * SCADAvis.io Synoptic API © 2018-2023 Ricardo L. Olsen / DSC Systems ALL RIGHTS RESERVED.\r\n *\r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, version 3.\r\n *\r\n * This program is distributed in the hope that it will be useful, but\r\n * WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\r\n * General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program. If not, see <http://www.gnu.org/licenses/>.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n *\r\n */\r\n\r\nexport type SvArgs = {\r\n  container: HTMLDivElement | string;\r\n  apikey: string;\r\n  iframeparams: string | null;\r\n  svgurl: string | null;\r\n  colorsTable: Record<number, string>;\r\n};\r\n\r\nexport class ScadaVis {\r\n  version = '2.0.7t';\r\n  iframe: HTMLIFrameElement | null = null;\r\n  componentloaded = false;\r\n  readyfordata = false;\r\n  domain = '*';\r\n  rtdata: any = { data: { type: 'tags', tags: [] } };\r\n  npts: any = {};\r\n  vals: any = {};\r\n  qualifs: any = {};\r\n  descriptions: any = {};\r\n  npt = 0;\r\n  svgobj: any = null;\r\n  zoomobj: any = null;\r\n  moveobj: any = null;\r\n  enabletoolsobj: any = null;\r\n  enablekeyboardobj: any = null;\r\n  enableflashobj: any = null;\r\n  hidewatermarkobj: any = null;\r\n  setcolorobj: any = [];\r\n  setcolorsobj: any = null;\r\n  resetobj: any = null;\r\n  tagsList = '';\r\n  onready: any = null;\r\n  onerror: any = null;\r\n  onclick: any = null;\r\n  loadingSVG = 0;\r\n  updateHandle = 0;\r\n  resolveFunction: any = null;\r\n  rejectFunction: any = null;\r\n  container: HTMLDivElement | string | Object | any = null;\r\n  apikey: any = null;\r\n  iframeparams: any = null;\r\n  svgurl: any = null;\r\n  colorsTable: any = null;\r\n  enablemouseobj: any = null;\r\n  mousewheelobj: any = null;\r\n  loaded: any = null;\r\n  aux = false;\r\n  panelContainerResizeObserver: any;\r\n\r\n  /**\r\n   * Generate an unique DOM element ID.\r\n   * @private\r\n   * @method guidGenerator\r\n   * @memberof scadavis\r\n   * @returns {string} DOM ID.\r\n   */\r\n  guidGenerator (): string {\r\n    const S4 = function () {\r\n      return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n    };\r\n    return S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4();\r\n  }\r\n\r\n  /**\r\n   * Create a DOM element from HTML.\r\n   * @private\r\n   * @method createElementFromHTML\r\n   * @memberof scadavis\r\n   * @returns {string} DOM ID.\r\n   */\r\n  createElementFromHTML (htmlString: string): ChildNode | null {\r\n    const div = document.createElement('div');\r\n    div.innerHTML = htmlString.trim();\r\n    return div.firstChild;\r\n  }\r\n\r\n  /**\r\n   * Load the SVG synoptic display file from a SVG URL.\r\n   * @method loadURL\r\n   * @memberof scadavis\r\n   * @param {string} svgurl - The SVG URL.\r\n   */\r\n  loadURL (svgurl: string) {\r\n    this.svgobj = null;\r\n    this.readyfordata = false;\r\n    this.svgurl = svgurl;\r\n    if (this.svgurl !== '' && this.loadingSVG === 0) {\r\n      this.loadingSVG = 1;\r\n      const xhr = new XMLHttpRequest();\r\n      xhr.open('GET', this.svgurl); // here you point to the SVG synoptic display file\r\n      let _this = this;\r\n      xhr.onload = function () {\r\n        if (xhr.status === 200) {\r\n          {\r\n            _this.loadingSVG = 0;\r\n          }\r\n          if (_this.componentloaded) {\r\n            // SCADAvis component already loaded?\r\n            _this.iframe?.contentWindow?.postMessage(xhr.responseText, _this.domain);\r\n          }\r\n          // send the SVG file contents to the component\r\n          else {\r\n            _this.svgobj = xhr.responseText;\r\n          } // buffers the result for later use (this can save some time)\r\n        }\r\n      };\r\n      xhr.onreadystatechange = function (oEvent) {\r\n        if (xhr.readyState === 4) {\r\n          if (xhr.status === 200) {\r\n          } else {\r\n            _this.loadingSVG = 0;\r\n            if (this.onerror) {\r\n              _this.onerror(xhr.statusText);\r\n            } else {\r\n              console.warn('SCADAvis.io API: error loading SVG URL. ' + xhr.statusText);\r\n            }\r\n          }\r\n        }\r\n      };\r\n      xhr.send();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset all data values and tags.\r\n   * @method resetData\r\n   * @memberof scadavis\r\n   */\r\n  resetData () {\r\n    this.npt = 0;\r\n    this.npts = {};\r\n    this.vals = {};\r\n    this.qualifs = {};\r\n    this.descriptions = {};\r\n\r\n    const obj = { data: { type: 'resetData' } };\r\n    if (this.readyfordata) {\r\n      window.postMessage(obj, this.domain);\r\n    } else {\r\n      this.resetobj = obj;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update values for tags to the component. Send all tags available. Work as a promise. Only available for version 2+.\r\n   * @method refreshDisplay\r\n   * @memberof scadavis\r\n   * @param {Object.<string, number>} [values] - values in a object like { \"tag1\" : 1.0, \"tag2\": 1.2, \"tag3\": true }.\r\n   * @returns {Object} Returns a promise. The promise resolves after the display refresh is completed.\r\n   */\r\n  refreshDisplay (values?: Record<string, number>) {\r\n    let _this = this;\r\n    return new Promise(function (resolve, reject) {\r\n      if (!_this.readyfordata) {\r\n        reject(new Error('Not ready for data!'));\r\n        return;\r\n      }\r\n      if (_this.resolveFunction) {\r\n        reject(new Error('Ongoing display refresh!'));\r\n        return;\r\n      }\r\n      _this.resolveFunction = resolve;\r\n      _this.rejectFunction = reject;\r\n      _this.updateValues(values);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update values for tags to the component. Send all tags available. (use refreshDisplay when promise-based method preferred)\r\n   * @method updateValues\r\n   * @memberof scadavis\r\n   * @param {Object.<string, number>} [values] - values in a object like { \"tag1\" : 1.0, \"tag2\": 1.2, \"tag3\": true }.\r\n   * @returns {number} Returns request handle or null if not ready.\r\n   */\r\n  updateValues (values?: Record<string, number>) {\r\n    if (!this.readyfordata) {\r\n      return null;\r\n    }\r\n    let _this = this;\r\n    if (typeof values === 'object' && values !== null) {\r\n      Object.keys(values).map(function (tag, index) {\r\n        let n;\r\n        if (tag in _this.npts) {\r\n          n = _this.npts[tag];\r\n        } else {\r\n          n = ++_this.npt;\r\n          _this.npts[tag] = n;\r\n        }\r\n        _this.vals[tag] = values[tag];\r\n        _this.qualifs[tag] = 0x00;\r\n      });\r\n    }\r\n\r\n    const rtdata: any = {\r\n      data: { type: 'tags', tags: [], handle: ++this.updateHandle },\r\n    };\r\n    Object.keys(this.npts).map(function (tag, index) {\r\n      rtdata.data.tags[index] = {};\r\n      rtdata.data.tags[index].path = tag;\r\n      rtdata.data.tags[index].value = _this.vals[tag];\r\n      rtdata.data.tags[index].quality = !(_this.qualifs[tag] & 0x80);\r\n      if (typeof _this.vals[tag] === 'number') {\r\n        rtdata.data.tags[index].type = 'float';\r\n      } else if (typeof _this.vals[tag] === 'boolean') {\r\n        rtdata.data.tags[index].type = 'bool';\r\n      } else {\r\n        rtdata.data.tags[index].type = 'string';\r\n      }\r\n      rtdata.data.tags[index].parameters = {\r\n        Value: {\r\n          TagClientItem: _this.npts[tag],\r\n          Alarmed: (_this.qualifs[tag] & 0x100) === 0x100,\r\n          Desc: _this.descriptions[tag],\r\n        },\r\n      };\r\n    });\r\n    this.iframe?.contentWindow?.postMessage(rtdata, this.domain);\r\n    return rtdata.handle;\r\n  }\r\n\r\n  /**\r\n   * Set a value for a tag. The component will be updated immediately if the component is ready for data.\r\n   * Notice that updating the component at too many times per second can cause performance problems.\r\n   * Preferably update many values using storeValue() then call updateValues() once (repeat after a second or more).\r\n   * @method setValue\r\n   * @memberof scadavis\r\n   * @param {string} tag - Tag name.\r\n   * @param {number} value - Value for the tag.\r\n   * @param {bool} [failed=false] - True if value is bad or old, false or absent if value is good.\r\n   * @param {bool} [alarmed=false] - True if value is alarmed, false or absent if value is normal.\r\n   * @param {string} [description=tag] - Description.\r\n   * @returns {bool} Returns true if the component was updated (true) or the value was buffered (false).\r\n   */\r\n  setValue (tag: string, value: number, failed?: boolean, alarmed?: boolean, description?: string) {\r\n    if (tag === '' || tag === undefined || tag === null) {\r\n      return this.readyfordata;\r\n    }\r\n    let n;\r\n    failed = failed || false;\r\n    alarmed = alarmed || false;\r\n    description = description || tag;\r\n    if (tag in this.npts) {\r\n      n = this.npts[tag];\r\n    } else {\r\n      n = ++this.npt;\r\n      this.npts[tag] = n;\r\n    }\r\n    this.vals[tag] = value;\r\n    this.qualifs[tag] = (failed ? 0x80 : 0x00) | (alarmed ? 0x100 : 0x00);\r\n    this.descriptions[tag] = description;\r\n    if (this.readyfordata) {\r\n      const rtdata: any = {\r\n        data: { type: 'tags', tags: [], handle: ++this.updateHandle },\r\n      };\r\n      rtdata.data.tags[0] = {};\r\n      rtdata.data.tags[0].path = tag;\r\n      rtdata.data.tags[0].value = value;\r\n      rtdata.data.tags[0].quality = !(this.qualifs[tag] & 0x80);\r\n      if (typeof value === 'number') {\r\n        rtdata.data.tags[0].type = 'float';\r\n      } else if (typeof value === 'boolean') {\r\n        rtdata.data.tags[0].type = 'bool';\r\n      } else {\r\n        rtdata.data.tags[0].type = 'string';\r\n      }\r\n      rtdata.data.tags[0].parameters = {\r\n        Value: {\r\n          TagClientItem: n,\r\n          Alarmed: (this.qualifs[tag] & 0x100) === 0x100,\r\n          Desc: this.descriptions[tag],\r\n        },\r\n      };\r\n      this.iframe?.contentWindow?.postMessage(rtdata, this.domain);\r\n    }\r\n    return this.readyfordata;\r\n  }\r\n\r\n  /**\r\n   * Store a value for a tag. The component will not be updated until called updateValues().\r\n   * @method storeValue\r\n   * @memberof scadavis\r\n   * @param {string} tag - Tag name.\r\n   * @param {number} value - Value for the tag.\r\n   * @param {bool} [failed=false] - True if value is bad or old, false or absent if value is good.\r\n   * @param {bool} [alarmed=false] - True if value is alarmed, false or absent if value is normal.\r\n   * @param {string} [description=tag] - Description.\r\n   * @returns {bool} - Returns true if the component is ready for data, false if not.\r\n   */\r\n  storeValue (tag: string, value: number, failed?: boolean, alarmed?: boolean, description?: string) {\r\n    if (tag === '' || tag === undefined || tag === null) {\r\n      return this.readyfordata;\r\n    }\r\n    let n;\r\n    failed = failed || false;\r\n    alarmed = alarmed || false;\r\n    description = description || tag;\r\n    if (tag in this.npts) {\r\n      n = this.npts[tag];\r\n    } else {\r\n      n = ++this.npt;\r\n      this.npts[tag] = n;\r\n    }\r\n    this.vals[tag] = value;\r\n    this.qualifs[tag] = (failed ? 0x80 : 0x00) | (alarmed ? 0x100 : 0x00);\r\n    this.descriptions[tag] = description;\r\n    return this.readyfordata;\r\n  }\r\n\r\n  /**\r\n   * Get a value for a tag.\r\n   * @method getValue\r\n   * @memberof scadavis\r\n   * @param {Object} tag - Tag name.\r\n   * @returns {number} Returns the value for the tag or null if not found.\r\n   */\r\n  getValue (tag: string): number | null {\r\n    if (tag in this.vals) {\r\n      return this.vals[tag];\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Recover the API Key.\r\n   * @method getApiKey\r\n   * @memberof scadavis\r\n   * @returns {string} API Key.\r\n   */\r\n  getApiKey (): string {\r\n    return this.apikey;\r\n  }\r\n\r\n  /**\r\n   * Get SCADAvis.io API Version.\r\n   * @method getVersion\r\n   * @memberof scadavis\r\n   * @returns {string} SCADAvis.io API Version.\r\n   */\r\n  getVersion (): string {\r\n    return this.version;\r\n  }\r\n\r\n  /**\r\n   * Get the DOM element of the iframe.\r\n   * @method getIframe\r\n   * @memberof scadavis\r\n   * @returns {Object} DOM element reference.\r\n   */\r\n  getIframe (): HTMLIFrameElement | null {\r\n    return this.iframe;\r\n  }\r\n\r\n  /**\r\n   * Get the current state of the component.\r\n   * @method getComponentState\r\n   * @memberof scadavis\r\n   * @returns {number} 0=not loaded, 1=loaded and ready for graphics, 2=SVG graphics processed and ready for data.\r\n   */\r\n  getComponentState (): number {\r\n    if (this.componentloaded === false) {\r\n      return 0;\r\n    } else if (this.readyfordata === false) {\r\n      return 1;\r\n    }\r\n    return 2;\r\n  }\r\n\r\n  /**\r\n   * Get SCADAvis.io Component Version.\r\n   * @method getComponentVersion\r\n   * @memberof scadavis\r\n   * @returns {string} SCADAvis.io Component Version.\r\n   */\r\n  getComponentVersion (): string {\r\n    return this.version;\r\n  }\r\n\r\n  /**\r\n   * Get tags list from the loaded SVG graphics.\r\n   * @method getTagsList\r\n   * @memberof scadavis\r\n   * @returns {string} Tags list.\r\n   */\r\n  getTagsList (): string {\r\n    return this.tagsList;\r\n  }\r\n\r\n  /**\r\n   * Move the graphic. Multiple calls have cumulative effect.\r\n   * @method moveBy\r\n   * @memberof scadavis\r\n   * @param {number} [dx=0] Horizontal distance.\r\n   * @param {number} [dy=0] Vertical distance.\r\n   * @param {boolean} [animate=false] Animate or not.\r\n   */\r\n  moveBy (dx: number, dy?: number, animate?: any) {\r\n    dx = dx || 0;\r\n    dy = dy || 0;\r\n    animate = animate || false;\r\n    const obj = { data: { type: 'moveBy', dx: dx, dy: dy, animate: animate } };\r\n    if (this.readyfordata) {\r\n      this.iframe?.contentWindow?.postMessage(obj, this.domain);\r\n    } else {\r\n      this.moveobj = obj;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply zoom level. Multiple calls have cumulative effect.\r\n   * @method zoomTo\r\n   * @memberof scadavis\r\n   * @param {number} [zoomLevel=1.1] Zoom level. >1 zoom in, <1 zoom out.\r\n   * @param {string|{x: number, y: number}} [target={x:0,y:0}] Id of object to zoom in/out or x/y coordinates.\r\n   * @param {boolean} [animate=false] Animate or not.\r\n   */\r\n  zoomTo (zoomLevel: number, target?: any, animate?: boolean) {\r\n    zoomLevel = zoomLevel || 1.1;\r\n    animate = animate || false;\r\n    const obj = {\r\n      data: {\r\n        type: 'zoomTo',\r\n        zoomLevel: zoomLevel,\r\n        target: target,\r\n        animate: animate,\r\n      },\r\n    };\r\n    if (this.readyfordata) {\r\n      this.iframe?.contentWindow?.postMessage(obj, this.domain);\r\n    } else {\r\n      this.zoomobj = obj;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply default zoom level/position.\r\n   * @method zoomToOriginal\r\n   * @memberof scadavis\r\n   * @param {boolean} [animate=false] Animate or not.\r\n   */\r\n  zoomToOriginal (animate?: boolean) {\r\n    animate = animate || false;\r\n    const obj = { data: { type: 'zoomToOriginal', animate: animate } };\r\n    if (this.readyfordata) {\r\n      this.iframe?.contentWindow?.postMessage(obj, this.domain);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enable or disable pan and zoom tools.\r\n   * @method enableTools\r\n   * @memberof scadavis\r\n   * @param {boolean} [panEnabled=true] Enable/disable Pan tool.\r\n   * @param {boolean} [zoomEnabled=false] Enable/disable Zoom tool.\r\n   */\r\n  enableTools (panEnabled?: boolean, zoomEnabled?: boolean) {\r\n    if (typeof panEnabled === 'undefined' || panEnabled) {\r\n      panEnabled = true;\r\n    }\r\n    if (typeof zoomEnabled === 'undefined') {\r\n      zoomEnabled = false;\r\n    }\r\n    const obj = {\r\n      data: {\r\n        type: 'enableTools',\r\n        panEnabled: panEnabled,\r\n        zoomEnabled: zoomEnabled,\r\n      },\r\n    };\r\n    if (this.readyfordata) {\r\n      this.iframe?.contentWindow?.postMessage(obj, this.domain);\r\n    } else {\r\n      this.enabletoolsobj = obj;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enable or disable pan and zoom via mouse.\r\n   * @method enableMouse\r\n   * @memberof scadavis\r\n   * @param {boolean} [panEnabled=true] Enable/disable pan via mouse.\r\n   * @param {boolean} [zoomEnabled=true] Enable/disable zoom via mouse.\r\n   */\r\n  enableMouse (panEnabled?: boolean, zoomEnabled?: boolean) {\r\n    if (typeof panEnabled === 'undefined' || panEnabled) {\r\n      panEnabled = true;\r\n    }\r\n    if (typeof zoomEnabled === 'undefined' || zoomEnabled) {\r\n      zoomEnabled = true;\r\n    }\r\n    const obj = {\r\n      data: {\r\n        type: 'enableMouse',\r\n        panEnabled: panEnabled,\r\n        zoomEnabled: zoomEnabled,\r\n      },\r\n    };\r\n    if (this.readyfordata) {\r\n      this.iframe?.contentWindow?.postMessage(obj, this.domain);\r\n    } else {\r\n      this.enablemouseobj = obj;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set direction of zoom bound to mouse wheel, and event propagation.\r\n   * @method setMouseWheel\r\n   * @memberof scadavis\r\n   * @param {boolean} [directionBackOut=true] true=back/out, false=back/in.\r\n   * @param {boolean} [blockEventPropagation=true] Enable/disable wheel event propagation.\r\n   */\r\n  setMouseWheel (directionBackOut?: boolean, blockEventPropagation?: boolean) {\r\n    if (typeof directionBackOut === 'undefined' || directionBackOut) {\r\n      directionBackOut = true;\r\n    }\r\n    if (typeof blockEventPropagation === 'undefined' || blockEventPropagation) {\r\n      blockEventPropagation = true;\r\n    }\r\n    const obj = {\r\n      data: {\r\n        type: 'setMouseWheel',\r\n        directionBackOut: directionBackOut,\r\n        blockEventPropagation: blockEventPropagation,\r\n      },\r\n    };\r\n    if (this.readyfordata) {\r\n      this.iframe?.contentWindow?.postMessage(obj, this.domain);\r\n    } else {\r\n      this.mousewheelobj = obj;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enable or disable keyboard functions (zoom & pan).\r\n   * @method enableKeyboard\r\n   * @memberof scadavis\r\n   * @param {boolean} [keyEnabled=true] Enable/disable Pan tool.\r\n   */\r\n  enableKeyboard (keyEnabled?: boolean) {\r\n    if (typeof keyEnabled === 'undefined' || keyEnabled) {\r\n      keyEnabled = true;\r\n    }\r\n    const obj = { data: { type: 'enableKeyboard', keyEnabled: keyEnabled } };\r\n    if (this.readyfordata) {\r\n      this.iframe?.contentWindow?.postMessage(obj, this.domain);\r\n    } else {\r\n      this.enablekeyboardobj = obj;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Enable or disable alarm flash (objects blinking when alarmed).\r\n   * @method enableAlarmFlash\r\n   * @memberof scadavis\r\n   * @param {boolean} [alarmFlashEnabled=true] Enable/disable global alarm flash.\r\n   */\r\n  enableAlarmFlash (alarmFlashEnabled?: boolean) {\r\n    if (typeof alarmFlashEnabled === 'undefined' || alarmFlashEnabled) {\r\n      alarmFlashEnabled = true;\r\n    }\r\n    const obj = {\r\n      data: { type: 'enableAlarmFlash', alarmFlashEnabled: alarmFlashEnabled },\r\n    };\r\n    if (this.componentloaded) {\r\n      this.iframe?.contentWindow?.postMessage(obj, this.domain);\r\n    } else {\r\n      this.enableflashobj = obj;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Hides the watermark.\r\n   * @method hideWatermark\r\n   * @memberof scadavis\r\n   */\r\n  hideWatermark () {\r\n    const obj = { data: { type: 'hideWatermark' } };\r\n    if (this.readyfordata) {\r\n      this.iframe?.contentWindow?.postMessage(obj, this.domain);\r\n    } else {\r\n      this.hidewatermarkobj = obj;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set color code for color shortcuts.\r\n   * @method setColor\r\n   * @memberof scadavis\r\n   * @param {number} [colorNumber] Color shortcut number.\r\n   * @param {string} [colorCode] Color code.\r\n   */\r\n  setColor (colorNumber: number, colorCode: string) {\r\n    const obj = {\r\n      data: {\r\n        type: 'setColor',\r\n        colorNumber: colorNumber,\r\n        colorCode: colorCode,\r\n      },\r\n    };\r\n    if (this.componentloaded) {\r\n      this.iframe?.contentWindow?.postMessage(obj, this.domain);\r\n    } else {\r\n      this.setcolorobj.push(obj);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set color codes for color shortcuts.\r\n   * @method setColors\r\n   * @memberof scadavis\r\n   * @param {Object.<number,string>} [colorsTable] Color shortcut number.\r\n   */\r\n  setColors (colorsTable: Record<number, string>) {\r\n    const obj = {\r\n      data: {\r\n        type: 'setColors',\r\n        colorsTable: colorsTable,\r\n      },\r\n    };\r\n    if (this.componentloaded) {\r\n      this.iframe?.contentWindow?.postMessage(obj, this.domain);\r\n    } else {\r\n      this.setcolorsobj = obj;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set event listeners.\r\n   * @method on\r\n   * @memberof scadavis\r\n   * @param {string} event Event name, one of: \"ready\", \"click\" (the first parameter of callback is the element id).\r\n   * @param {function} callback Callback function.\r\n   * @returns True for valid event, false for invalid event name.\r\n   */\r\n  on (event: string, callback: Function): boolean {\r\n    let ret = false;\r\n    switch (event) {\r\n      case 'loaded':\r\n        this.loaded = callback;\r\n        ret = true;\r\n        break;\r\n      case 'ready':\r\n        this.onready = callback;\r\n        ret = true;\r\n        break;\r\n      case 'error':\r\n        this.onerror = callback;\r\n        ret = true;\r\n        break;\r\n      case 'click':\r\n        this.onclick = callback;\r\n        ret = true;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * Must be created with the \"new\" keyword. (use scadavisInit when promise-based method preferred). E.g. var svgraph = new scadavis(\"div1\", \"\", \"https://svgurl.com/svgurl.svg\");\r\n   * @class scadavis - SCADAvis.io synoptic API class.\r\n   * @param {string} [container] - ID of the container object. If empty or null the iframe will be appended to the body.\r\n   * @param {string} [iframeparams] - Parameter string for configuring iframe (excluding id and src and sandbox) e.g. 'frameborder=\"0\" height=\"250\" width=\"250\"'.\r\n   * @param {string} [svgurl] - URL for the SVG file.\r\n   * @param {{container: string|Object, iframeparams: string, svgurl: string, colorsTable: Object}} [paramsobj] - Alternatively parameters can be passed in an object.\r\n   * Example usage: var svgraph = new scadavis(\"div1\", \"\", \"https://svgurl.com/svgurl.svg\");\r\n   */\r\n  constructor (container: SvArgs | string, iframeparams?: string, svgurl?: string) {\r\n    const _this: any = this;\r\n    let id;\r\n    let iframehtm;\r\n    let scrolling = ' scrolling=\"no\" ';\r\n\r\n    if (typeof container === 'object') {\r\n      this.container = container.container || '';\r\n      this.apikey = container.apikey || '';\r\n      this.iframeparams = container.iframeparams || 'frameborder=\"0\" height=\"250\" width=\"250\"';\r\n      this.svgurl = container.svgurl || '';\r\n      this.colorsTable = container.colorsTable || null;\r\n    } else {\r\n      this.container = container || '';\r\n      this.apikey = '';\r\n      this.iframeparams = iframeparams || 'frameborder=\"0\" height=\"250\" width=\"250\"';\r\n      this.svgurl = svgurl || '';\r\n      this.colorsTable = null;\r\n    }\r\n\r\n    this.iframe = null;\r\n    this.componentloaded = false;\r\n    this.readyfordata = false;\r\n    this.domain = '*';\r\n    this.rtdata = { data: { type: 'tags', tags: [] } };\r\n    this.npts = {};\r\n    this.vals = {};\r\n    this.qualifs = {};\r\n    this.descriptions = {};\r\n    this.npt = 0;\r\n    this.svgobj = null;\r\n    this.zoomobj = null;\r\n    this.moveobj = null;\r\n    this.enabletoolsobj = null;\r\n    this.enablekeyboardobj = null;\r\n    this.enableflashobj = null;\r\n    this.hidewatermarkobj = null;\r\n    this.setcolorobj = [];\r\n    this.setcolorsobj = null;\r\n    this.resetobj = null;\r\n    this.tagsList = '';\r\n    this.onready = null;\r\n    this.onerror = null;\r\n    this.onclick = null;\r\n    this.loadingSVG = 0;\r\n    this.updateHandle = 0;\r\n    this.resolveFunction = null;\r\n    this.rejectFunction = null;\r\n\r\n    id = this.guidGenerator();\r\n\r\n    if (typeof this.container === 'string') {\r\n      if (this.container.trim().length === 0) {\r\n        this.container = document.body;\r\n      } else {\r\n        this.container = document.getElementById(this.container);\r\n        if (this.container === null) {\r\n          this.container = document.body;\r\n        }\r\n      }\r\n    }\r\n\r\n    //// get library path\r\n    //const scripts = document.getElementsByTagName('script');\r\n    //let libPath = '.';\r\n    //for (let i = 0; i < scripts.length; ++i) {\r\n    //  const pos = scripts[i].src.indexOf('synopticapi.js');\r\n    //  if (pos > 0) {\r\n    //    libPath = scripts[i].src.substring(0, pos - 1);\r\n    //    break;\r\n    //  }\r\n    //}\r\n\r\n    // default is scrolling='no'\r\n    if (this.iframeparams.indexOf('scrolling') >= 0) {\r\n      scrolling = '';\r\n    }\r\n\r\n    iframehtm =\r\n      '<iframe id=\"' +\r\n      id +\r\n      '\" sandbox=\"allow-scripts allow-same-origin allow-popups allow-popups-to-escape-sandbox\" ' +\r\n      this.iframeparams +\r\n      scrolling +\r\n      ` src=\"/public/plugins/scadavis-synoptic-panel/synoptic/synoptic.html\"></iframe>`;\r\n    if (this.container.innerHTML !== undefined) {\r\n      (this.container as HTMLDivElement).appendChild(this.createElementFromHTML(iframehtm) as Node);\r\n    } else {\r\n      (this.container as HTMLDivElement).insertAdjacentHTML('afterend', iframehtm);\r\n    }\r\n\r\n    this.iframe = document.getElementById(id) as HTMLIFrameElement;\r\n\r\n    this.componentloaded = false;\r\n    this.readyfordata = false;\r\n\r\n    if (this.colorsTable) {\r\n      this.setColors(this.colorsTable);\r\n    }\r\n    if (this.svgurl !== '') {\r\n      this.loadURL(this.svgurl);\r\n    }\r\n\r\n    window.addEventListener('message', function (event: any) {\r\n      // receive messages, watch for messages from the SCADAvis.io component.\r\n\r\n      // for better security: check the origin of the message ( must be from the SCADAvis.io domain and component iframe )\r\n      if (\r\n        event.source === _this.iframe.contentWindow\r\n        // && event.origin === this.domain\r\n      ) {\r\n        // when message of type \"updated\", resolve promise\r\n        if (\r\n          typeof event.data === 'object' &&\r\n          event.data.data.type !== undefined &&\r\n          event.data.data.type === 'updated' &&\r\n          event.data.data.handle === _this.updateHandle\r\n        ) {\r\n          if (event.data.data.error) {\r\n            if (_this.rejectFunction) {\r\n              _this.rejectFunction(new Error(event.data.data.error));\r\n            }\r\n          } else if (_this.resolveFunction) {\r\n            _this.resolveFunction();\r\n          }\r\n          _this.resolveFunction = null;\r\n          _this.rejectFunction = null;\r\n          return;\r\n        }\r\n\r\n        // when message of type \"loaded\", get and send an SVG file to it\r\n        if (typeof event.data === 'object' && event.data.data.type !== undefined && event.data.data.type === 'loaded') {\r\n          _this.componentloaded = true;\r\n          if (_this.setcolorobj.length > 0) {\r\n            for (let i = 0; i < _this.setcolorobj.length; i++) {\r\n              event.source.postMessage(_this.setcolorobj[i], event.origin);\r\n            }\r\n            _this.setcolorobj = [];\r\n          }\r\n          if (_this.setcolorsobj !== null) {\r\n            event.source.postMessage(_this.setcolorsobj, event.origin);\r\n            _this.setcolorsobj = null;\r\n          }\r\n          if (_this.enableflashobj !== null) {\r\n            event.source.postMessage(_this.enableflashobj, event.origin);\r\n            _this.enableflashobj = null;\r\n          }\r\n          if (_this.svgobj !== null) {\r\n            event.source.postMessage(_this.svgobj, event.origin);\r\n          }\r\n          // send the SVG file contents to the component\r\n          else if (_this.svgurl !== '') {\r\n            _this.loadURL(_this.svgurl);\r\n          }\r\n          return;\r\n        }\r\n\r\n        // when message type \"ready\", the SVG screen is processed, then we can send real time data to the SCADAvis.io component\r\n        if (typeof event.data === 'object' && event.data.data.type !== undefined && event.data.data.type === 'ready') {\r\n          _this.readyfordata = true;\r\n          _this.tagsList = event.data.data.attributes.tagsList;\r\n          if (_this.rtdata.data.tags.length) {\r\n            _this.updateValues();\r\n          }\r\n          if (_this.zoomobj) {\r\n            event.source.postMessage(_this.zoomobj, event.origin);\r\n            _this.zoomobj = null;\r\n          }\r\n          if (_this.moveobj) {\r\n            event.source.postMessage(_this.moveobj, event.origin);\r\n            _this.moveobj = null;\r\n          }\r\n          if (_this.enabletoolsobj) {\r\n            event.source.postMessage(_this.enabletoolsobj, event.origin);\r\n            _this.enabletoolsobj = null;\r\n          }\r\n          if (_this.enablemouseobj) {\r\n            event.source.postMessage(_this.enablemouseobj, event.origin);\r\n            _this.enablemouseobj = null;\r\n          }\r\n          if (_this.mousewheelobj) {\r\n            event.source.postMessage(_this.mousewheelobj, event.origin);\r\n            _this.mousewheelobj = null;\r\n          }\r\n          if (_this.enablekeyboardobj) {\r\n            event.source.postMessage(_this.enablekeyboardobj, event.origin);\r\n            _this.enablekeyboardobj = null;\r\n          }\r\n          if (_this.hidewatermarkobj) {\r\n            event.source.postMessage(_this.hidewatermarkobj, event.origin);\r\n            _this.hidewatermarkobj = null;\r\n          }\r\n          if (_this.resetobj) {\r\n            event.source.postMessage(_this.resetobj, event.origin);\r\n            _this.resetobj = null;\r\n          }\r\n          if (_this.onready) {\r\n            _this.onready();\r\n          }\r\n          return;\r\n        }\r\n\r\n        // when message of type \"click\", emit the event callback\r\n        if (typeof event.data === 'object' && event.data.data.type !== undefined && event.data.data.type === 'click') {\r\n          if (_this.onclick) {\r\n            _this.onclick(event.data.data.attributes.event, event.data.data.attributes.tag);\r\n          }\r\n          return;\r\n        }\r\n      }\r\n    });\r\n\r\n    // return this\r\n  }\r\n\r\n  /**\r\n   * Initialization of the library via promise. Only available for version 2+.\r\n   * @function scadavisInit\r\n   * @global\r\n   * @param {string} [container] - ID of the container object. If empty or null the iframe will be appended to the body.\r\n   * @param {string} [iframeparams] - Parameter string for configuring iframe (excluding id and src and sandbox) e.g. 'frameborder=\"0\" height=\"250\" width=\"250\"'.\r\n   * @param {string} [svgurl] - URL for the SVG file.\r\n   * @param {{container: string|Object, iframeparams: string, svgurl: string, colorsTable: Object}} [paramsobj] - Alternatively parameters can be passed in an object.\r\n   * @returns {Object} Returns a promise with the {@link scadavis} object as a parameter. The promise resolves after the svg file is preprocessed (if an SVG file was specified) or after the component is loaded.\r\n   * Example usage: scadavisInit( {container: \"div1\", svgurl: \"file.svg\"} ).then(function (sv) { ... });\r\n   */\r\n  /*  \r\nscadavisInit (container: any, iframeparams: string, svgurl: string) {\r\n  let _this = this;\r\n  return new Promise(function (resolve, reject) {\r\n    try {\r\n      if (typeof container === 'object') {\r\n        svgurl = svgurl || container.svgurl;\r\n        delete container.svgurl;\r\n      }\r\n      const sv = _this.scadavis(container, iframeparams, '');\r\n      if (!svgurl) {\r\n        resolve(sv);\r\n        return;\r\n      }\r\n      sv.on('error', function (errMsg: any) {\r\n        reject(errMsg);\r\n      });\r\n      sv.on('ready', function () {\r\n        resolve(sv);\r\n      });\r\n      sv.loadURL(svgurl);\r\n    } catch (e) {\r\n      reject(e);\r\n    }\r\n  });\r\n}\r\n*/\r\n}\r\n","// SCADAVis.io Synoptic Panel for Grafana\n// © 2023 Ricardo L. Olsen / DSC Systems\n\nimport { PanelProps } from '@grafana/data';\nimport React, { useEffect, useMemo } from 'react';\nimport { ScadavisPanelOptions } from 'types';\nimport * as synopticapi from './synoptic';\n\nconst svObjs: synopticapi.ScadaVis[] = [];\nconst svState: svStateT[] = [];\ntype tagValuesT = Record<string, number>;\ntype svStateT = {\n  svId: string;\n  svReactElem: any;\n  dashboardUID: string;\n  lastOptions: ScadavisPanelOptions;\n};\n\n// apply zoom, etc. to the SVG view\nfunction doAdjusts(options: ScadavisPanelOptions, svgraph: synopticapi.ScadaVis) {\n  svgraph.zoomToOriginal();\n  svgraph.moveBy(-options.moveByX, -options.moveByY);\n  const el = svgraph.getIframe()?.parentElement?.parentElement;\n  if (el && el.clientWidth > 0 && el.clientHeight > 0) {\n    const iframe = svgraph.getIframe();\n    if (iframe) {\n      iframe.width = '' + (el.clientWidth - 5);\n      iframe.height = '' + (el.clientHeight - 5);\n    }\n    if (options.autoResize) {\n      svgraph.zoomTo(\n        options.zoomLevel * (el.clientWidth < el.clientHeight ? el.clientWidth / 250 : el.clientHeight / 250)\n      );\n    } else {\n      svgraph.zoomTo(options.zoomLevel);\n    }\n  } else {\n    svgraph.zoomTo(options.zoomLevel);\n  }\n}\n\n// update for edit mode (will have 2 parent elements for the scadavis div)\nfunction updatePanels(\n  options: ScadavisPanelOptions,\n  svgraph: synopticapi.ScadaVis,\n  objInd: number,\n  tagValues: tagValuesT\n) {\n  const elms = document.querySelectorAll(\"[id='\" + svState[objInd].svId + \"']\");\n  const iframe = svgraph.getIframe();\n  for (let i = 0; iframe && i < elms.length; i++) {\n    if (elms[i].firstChild !== iframe) {\n      elms[i].appendChild(iframe);\n      svgraph.on('ready', () => {\n        svgraph.enableMouse(options.enableMousePan, options.enableMouseWheelZoom);\n        svgraph.enableTools(options.showZoomPan, options.showZoomPan);\n        svgraph.zoomToOriginal();\n        svgraph.moveBy(-options.moveByX, -options.moveByY);\n        const el = iframe.parentElement?.parentElement;\n        if (el) {\n          svgraph.panelContainerResizeObserver = new ResizeObserver((entries) => {\n            for (const entry of entries) {\n              if (entry.contentRect) {\n                doAdjusts(options, svgraph);\n              }\n            }\n          });\n          svgraph.panelContainerResizeObserver.observe(el);\n        }\n        if (el && el.clientWidth > 0 && el.clientHeight > 0) {\n          iframe.width = '' + (el.clientWidth - 5);\n          iframe.height = '' + (el.clientHeight - 5);\n          if (options.autoResize) {\n            svgraph.zoomTo(\n              options.zoomLevel * (el.clientWidth < el.clientHeight ? el.clientWidth / 250 : el.clientHeight / 250)\n            );\n          } else {\n            svgraph.zoomTo(options.zoomLevel);\n          }\n        } else {\n          svgraph.zoomTo(options.zoomLevel);\n        }\n        svgraph.updateValues(tagValues);\n      });\n    }\n  }\n\n  // changed options, apply new zoom etc.\n  if (JSON.stringify(svState[objInd].lastOptions) !== JSON.stringify(options)) {\n    doAdjusts(options, svObjs[objInd]);\n    svState[objInd].lastOptions = Object.assign(options);\n  }\n  svgraph.updateValues(tagValues);\n}\n\nexport const ScadavisPanel: React.FC<PanelProps<ScadavisPanelOptions>> = ({\n  options,\n  data,\n  width,\n  height,\n  onOptionsChange,\n}) => {\n  // maps tag values\n  const tagValues = useMemo((): tagValuesT => {\n    return {};\n  }, []);\n  let cntMappedFields = 0;\n  for (let i = 0; i < data.series.length; i++) {\n    const s = data.series[i];\n    for (let j = 0; j < s.fields.length; j++) {\n      const f = s.fields[j];\n      if (f.type !== 'number' || f.values.length === 0) {\n        continue;\n      }\n      cntMappedFields++;\n      tagValues['@' + cntMappedFields] = f.values[f.values.length - 1];\n      if (f.name) {\n        const values = f.values as any;\n        if (values.buffer) {\n          tagValues['@' + cntMappedFields] = values.buffer[values.buffer.length - 1];\n          tagValues[f.name] = values.buffer[values.buffer.length - 1];\n        } else {\n          tagValues['@' + cntMappedFields] = values[f.values.length - 1];\n          tagValues[f.name] = f.values[values.length - 1];\n        }\n      }\n    }\n  }\n\n  const objInd = data.request?.panelId || -1;\n  const firstExec = !(objInd in svObjs) || !document.getElementById(svObjs[objInd].container.id);\n  if (firstExec) {\n    // first execution: create object to save current state\n    let lastOptions: ScadavisPanelOptions = {\n      svgUrl: '',\n      zoomLevel: -1,\n      moveByX: -999999,\n      moveByY: -999999,\n      autoResize: false,\n      showZoomPan: false,\n      enableMousePan: false,\n      enableMouseWheelZoom: false,\n    };\n    if (objInd in svState) {\n      lastOptions = svState[objInd].lastOptions;\n      if (svState[objInd].dashboardUID === data?.request?.dashboardUID) {\n        options.svgUrl = lastOptions.svgUrl;\n      }\n    }\n    const svId = 'scadavis_' + crypto.randomUUID();\n    svState[objInd] = {\n      svId: svId,\n      svReactElem: React.createElement('div', { id: svId }),\n      dashboardUID: data?.request?.dashboardUID as string,\n      lastOptions: lastOptions,\n    };\n  }\n\n  if (!firstExec && options.svgUrl === svState[objInd].lastOptions.svgUrl) {\n    // check edit mode (will have 2 parent elements for the scadavis div)\n    const svgraph = svObjs[objInd];\n    updatePanels(options, svgraph, objInd, tagValues);\n  }\n\n  if (!firstExec) {\n    // new SVG file (loaded as URL or from URL)?\n    if (options.svgUrl !== svState[objInd].lastOptions.svgUrl) {\n      svObjs[objInd].getIframe()?.remove();\n      const svgraph = new synopticapi.ScadaVis({\n        container: svState[objInd].svId,\n        iframeparams: `frameborder=\"0\" height=\"${height}\" width=\"${width}\"`,\n        svgurl: options.svgUrl,\n      } as synopticapi.SvArgs);\n      if (svgraph) {\n        svObjs[objInd] = svgraph;\n        const iframe = svgraph.getIframe();\n        if (iframe) {\n          document.getElementById(svObjs[objInd].container.id)?.appendChild(iframe);\n        }\n      }\n      svState[objInd].lastOptions = Object.assign(options);\n      updatePanels(options, svgraph, objInd, tagValues);\n    }\n  }\n\n  useEffect(() => {\n    // at first execution, after the react object created (id=svState[objInd].svId),\n    // will create the scadavis object with the react object as the parent\n    if (!(objInd in svObjs) || !document.getElementById(svObjs[objInd].container.id)) {\n      const svgraph = new synopticapi.ScadaVis({\n        container: svState[objInd].svId,\n        iframeparams: `frameborder=\"0\" height=\"${height}\" width=\"${width}\"`,\n        svgurl: options.svgUrl,\n      } as synopticapi.SvArgs);\n      svObjs[objInd] = svgraph;\n      svState[objInd].lastOptions = Object.assign(options);\n      if (svgraph) {\n        svgraph.on('ready', () => {\n          svgraph.enableMouse(options.enableMousePan, options.enableMouseWheelZoom);\n          svgraph.enableTools(options.showZoomPan, options.showZoomPan);\n          svgraph.moveBy(-options.moveByX, -options.moveByY);\n          const el = svgraph.getIframe()?.parentElement?.parentElement;\n          if (el && el.clientWidth > 0 && el.clientHeight > 0) {\n            svgraph.panelContainerResizeObserver = new ResizeObserver((entries) => {\n              for (const entry of entries) {\n                if (entry.contentRect) {\n                  doAdjusts(options, svgraph);\n                }\n              }\n            });\n            svgraph.panelContainerResizeObserver.observe(el);\n            if (options.autoResize) {\n              svgraph.zoomTo(\n                options.zoomLevel * (el.clientWidth < el.clientHeight ? el.clientWidth / 250 : el.clientHeight / 250)\n              );\n            } else {\n              svgraph.zoomTo(options.zoomLevel);\n            }\n          }\n          svgraph.updateValues(tagValues);\n        });\n      }\n    }\n  }, [options, tagValues, objInd, height, width]);\n\n  return svState[objInd].svReactElem;\n};\n","import React from 'react';\r\nimport { FileUpload } from '@grafana/ui';\r\n\r\nexport const UploadSVG = ( { onChange }: { onChange: (value: string) => any } ) => {\r\n  return (\r\n    <FileUpload\r\n      accept=\".svg\"\r\n      onFileUpload={(event) => {\r\n        const tgt: any = event.target;\r\n        if (tgt?.files && tgt?.files.length>0){\r\n          const file = tgt?.files[0];\r\n          if (file.type === \"image/svg+xml\") {\r\n            const reader = new FileReader();\r\n            reader.onload = function () {\r\n             onChange(reader.result as string); \r\n            }\r\n            reader.readAsDataURL(file);\r\n           } \r\n        }\r\n      }}\r\n    >\r\n      Upload SVG file\r\n    </FileUpload>\r\n  );\r\n};\r\n","import { PanelPlugin } from '@grafana/data';\nimport { ScadavisPanel } from './ScadavisPanel';\nimport { ScadavisPanelOptions } from './types';\nimport { UploadSVG } from './SvgFilePicker';\n\nexport const plugin = new PanelPlugin<ScadavisPanelOptions>(ScadavisPanel).setPanelOptions(builder => {\n  return builder\n    .addTextInput({\n      path: 'svgUrl',\n      name: 'SVG URL',\n      description: 'Enter SVG URL',\n      defaultValue: 'https://raw.githubusercontent.com/riclolsen/displayfiles/master/helloworld.svg',\n    })\n    .addCustomEditor({\n      id: 'svgFileId',\n      path: 'svgUrl',\n      name: 'Upload local SVG file',\n      editor: UploadSVG,\n      defaultValue: 'https://raw.githubusercontent.com/riclolsen/displayfiles/master/helloworld.svg',\n    })\n    .addSliderInput({\n      path: 'zoomLevel',\n      name: 'SVG zoom level',\n      description: 'Enter value <1 to shrink SVG view or >1 to grow it',\n      defaultValue: 1,\n      settings: {\n        min: 0.1,\n        max: 3,\n        step: 0.1,\n      },\n    })\n    .addSliderInput({\n      path: 'moveByX',\n      name: 'Horizontal offset',\n      description: 'Enter value <0 to move left or >0 to move right',\n      defaultValue: 0,\n      settings: {\n        min: -1000,\n        max: 1000,\n        step: 1,\n      },\n    })\n    .addSliderInput({\n      path: 'moveByY',\n      name: 'Vertical offset',\n      description: 'Enter value <0 to move up or >0 to move down',\n      defaultValue: 0,\n      settings: {\n        min: -1000,\n        max: 1000,\n        step: 1,\n      },\n    })\n    .addBooleanSwitch({\n      path: 'autoResize',\n      name: 'Auto resize',\n      description: 'Bind SVG view size to panel size',\n      defaultValue: false,\n    })\n    .addBooleanSwitch({\n      path: 'showZoomPan',\n      name: 'Show zoom/pan tool',\n      description: 'Toolbar over SVG top-left corner with zoom/pan buttons',\n      defaultValue: false,\n    })\n    .addBooleanSwitch({\n      path: 'enableMousePan',\n      name: 'Enable mouse pan',\n      description: 'Pan the SVG view with mouse drag',\n      defaultValue: false,\n    })\n    .addBooleanSwitch({\n      path: 'enableMouseWheelZoom',\n      name: 'Enable mouse wheel zoom',\n      description: 'Zoom the SVG view with mouse wheel roll',\n      defaultValue: false,\n    });\n});\n"],"names":["module","exports","__WEBPACK_EXTERNAL_MODULE__305__","__WEBPACK_EXTERNAL_MODULE__388__","__WEBPACK_EXTERNAL_MODULE__650__","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","n","getter","__esModule","d","a","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","r","Symbol","toStringTag","value","ScadaVis","guidGenerator","S4","Math","random","toString","substring","createElementFromHTML","htmlString","div","document","createElement","innerHTML","trim","firstChild","loadURL","svgurl","this","svgobj","readyfordata","loadingSVG","xhr","XMLHttpRequest","open","_this","onload","status","componentloaded","iframe","contentWindow","postMessage","responseText","domain","onreadystatechange","oEvent","readyState","onerror","statusText","console","warn","send","resetData","npt","npts","vals","qualifs","descriptions","data","type","window","resetobj","refreshDisplay","values","Promise","resolve","reject","resolveFunction","Error","rejectFunction","updateValues","keys","map","tag","index","rtdata","tags","handle","updateHandle","path","quality","parameters","Value","TagClientItem","Alarmed","Desc","setValue","failed","alarmed","description","storeValue","getValue","getApiKey","apikey","getVersion","version","getIframe","getComponentState","getComponentVersion","getTagsList","tagsList","moveBy","dx","dy","animate","moveobj","zoomTo","zoomLevel","target","zoomobj","zoomToOriginal","enableTools","panEnabled","zoomEnabled","enabletoolsobj","enableMouse","enablemouseobj","setMouseWheel","directionBackOut","blockEventPropagation","mousewheelobj","enableKeyboard","keyEnabled","enablekeyboardobj","enableAlarmFlash","alarmFlashEnabled","enableflashobj","hideWatermark","hidewatermarkobj","setColor","colorNumber","colorCode","setcolorobj","push","setColors","colorsTable","setcolorsobj","on","event","callback","ret","loaded","onready","onclick","constructor","container","iframeparams","aux","panelContainerResizeObserver","id","iframehtm","scrolling","length","body","getElementById","indexOf","appendChild","insertAdjacentHTML","addEventListener","source","error","i","origin","attributes","svObjs","svState","doAdjusts","options","svgraph","moveByX","moveByY","el","parentElement","clientWidth","clientHeight","width","height","autoResize","updatePanels","objInd","tagValues","elms","querySelectorAll","svId","enableMousePan","enableMouseWheelZoom","showZoomPan","ResizeObserver","entries","entry","contentRect","observe","JSON","stringify","lastOptions","assign","UploadSVG","onChange","FileUpload","accept","onFileUpload","tgt","files","file","reader","FileReader","result","readAsDataURL","plugin","PanelPlugin","onOptionsChange","useMemo","cntMappedFields","series","s","j","fields","f","name","buffer","request","panelId","firstExec","svgUrl","dashboardUID","crypto","randomUUID","svReactElem","React","remove","synopticapi","useEffect","setPanelOptions","builder","addTextInput","defaultValue","addCustomEditor","editor","addSliderInput","settings","min","max","step","addBooleanSwitch"],"sourceRoot":""}